#!/usr/bin/env python
# -*- encoding: utf8 -*-

'''
Change gen_command if you don't use vim.
Change input mappings if you are not used to the default inputs.
'''

import re
import subprocess
import sys
import optparse
import os


__author__ = 'fcamel'


#------------------------------------------------------------------------------
# Configuration
#------------------------------------------------------------------------------
def gen_vim_command(filename, line, pattern):
    return 'vi %s -c/%s +%s' % (filename, pattern, line)

gen_command = gen_vim_command

# Input mappings
A_KEEP_STATEMENT  = ';'
A_CLEAN_STATEMENT = '!;'
A_FOLD            = '.'
A_RESTART         = '~'

#------------------------------------------------------------------------------
# Helper functions
#------------------------------------------------------------------------------
def check_install():
    for cmd in ['mkid', 'gid']:
        ret = os.system('which %s > /dev/null' % cmd)
        if ret != 0:
            msg = (
                "The program '%s' is currently not installed.  "
                "You can install it by typing:\n"
                "sudo apt-get install id-utils" % cmd
            )
            print msg
            sys.exit(1)

def gid(pattern):
    cmd = ['gid', pattern]
    process = subprocess.Popen(cmd,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    return process.stdout.read().split('\n')

def get_list(patterns=None):
    if patterns is None:
        patterns = get_list.original_patterns
    first_pattern = patterns[0]

    lines = gid(first_pattern)
    tokens_list = [line.split(':', 2) for line in lines]
    tokens_list = [ts for ts in tokens_list if len(ts) == 3]

    for pattern in patterns[1:]:
        tokens_list = filter_pattern(tokens_list, pattern)

    return tokens_list

get_list.original_patterns = []

def show_list(tokens_list, patterns, last_n, fold):
    def yellow(text):
        return '\033[1;33m%s\033[0m' % text

    def yellow_background(text):
        return '\033[30;43m%s\033[0m' % text

    def green(text):
        return '\033[1;32m%s\033[0m' % text

    def red(text):
        return '\033[1;31m%s\033[0m' % text

    def black(text):
        return '\033[1;30m%s\033[0m' % text

    os.system('clear')
    last_filename = ''
    for i, (filename, line_number, code) in enumerate(tokens_list):
        if fold and filename == last_filename:
            continue

        last_filename = filename
        i += 1
        if i == last_n:
            print black('(%s) %s:%s:%s' % (i, line_number, filename, code))
        else:
            for pattern in patterns:
                code = code.replace(pattern, yellow_background(pattern))
            print '(%s) %s:%s:%s' % (red(i), yellow(line_number), green(filename), code)

def diff_list(kept, removed):
    return [e for e in kept if e not in removed]

def filter_statement(tokens_list, exclude):
    matched = [tokens for tokens in tokens_list if re.search(';\s*$', tokens[2])]
    if not exclude:
        return matched
    return diff_list(tokens_list, matched)

def filter_filename(tokens_list, pattern, exclude):
    matched = [tokens for tokens in tokens_list if re.search(pattern, tokens[0])]
    if not exclude:
        return matched
    return diff_list(tokens_list, matched)

def filter_pattern(tokens_list, pattern):
    return [tokens for tokens in tokens_list if re.search('\\b%s\\b' % pattern, tokens[2])]

def filter_until_select(tokens_list, patterns, last_n):
    '''
    Return:
        >0: selected number.
         0: normal exit.
        <0: error.
    '''
    tokens_list = tokens_list[:]  # Make a clone.

    # Enter interactive mode.
    if not hasattr(filter_until_select, 'fold'):
        filter_until_select.fold = False
    while True:
        if not tokens_list:
            print 'No file matched.'
            return 0, tokens_list, patterns

        show_list(tokens_list, patterns, last_n, filter_until_select.fold)
        msg = (
            '\nSelect an action:'
            '\n* Input number to select a file.'
            '\n* Type "%s" / "%s" to keep / remove statements.'
            '\n* Type "%s" to switch between all matches and fold matches.'
            '\n* Type STRING (regex) to filter filename. !STRING means exclude the matched filename: '
            '\n* Type %s[PATTERN1 PATTERN2 ...] to start over. '
            '\n  Type only "%s" to use the patterns from the command line.'
            '\n* Type ENTER to exit.'
            '\n'
            '\n>> ' % (A_KEEP_STATEMENT, A_CLEAN_STATEMENT, A_FOLD, A_RESTART, A_RESTART)
        )
        response = raw_input(msg).strip()
        if not response:
            return 0, tokens_list, patterns

        if re.match('\d+', response):
            break

        # Clean/Keep statements
        if response in [A_CLEAN_STATEMENT, A_KEEP_STATEMENT]:
            tokens_list = filter_statement(tokens_list, response == A_CLEAN_STATEMENT)
            continue

        if response == A_FOLD:
            filter_until_select.fold = not filter_until_select.fold
            continue

        if response[0] == A_RESTART:
            if len(response) == 1:
                tokens_list = get_list()
            else:
                patterns = response[1:].split()
                tokens_list = get_list(patterns)
            continue

        # Clean/Keep based on filename
        if response[0] == '!':
            exclude = True
            response = response[1:]
        else:
            exclude = False
        tokens_list = filter_filename(tokens_list, response, exclude)

    # Parse the selected number
    try:
        n = int(response)
    except ValueError, e:
        print 'Invalid input.'
        return -1, tokens_list, patterns

    if n < 1 or n > len(tokens_list):
        print 'Invalid input.'
        return -1, tokens_list, patterns

    return n, tokens_list, patterns

#------------------------------------------------------------------------------
# main
#------------------------------------------------------------------------------
def main():
    '''\
    %prog [options] <pattern> [<pattern> ...]

    Grep pattern in source codes using id-utils.
    Before starting, type 'mkid' in your source root first.

    Example of usages:
        $ gj MyClient         # find any snippet which contains MyClient
        $ gj MyClient class   # find the definition.
    '''
    check_install()

    parser = optparse.OptionParser(usage=main.__doc__)
    options, args = parser.parse_args()

    if len(args) < 1:
        parser.print_help()
        sys.exit(1)

    if not os.path.exists('ID'):
        print 'Database file "ID" is not found. Have you run "mkid"?'
        return 2

    patterns = args

    # Find the initial matched set.
    get_list.original_patterns = patterns
    tokens_list = get_list()

    # Filter the rest or view the selected file.
    n = 0
    while True:
        n, tokens_list, patterns = filter_until_select(tokens_list, patterns, n)
        if n <= 0:
            if n < 0:
                return 1
            return 0

        # Edit the chosen one.
        filename, line, _ = tokens_list[n - 1]

        ret = os.system(gen_command(filename, line, patterns[0]))
        if ret != 0:
            return 2

    return 0


if __name__ == '__main__':
    sys.exit(main())
